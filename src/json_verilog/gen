#!/usr/bin/env python
# JSON to verilog compiler
#
# GPLv2

import json


def generate_head(name, json_module):
    """
    # JSON + name
    {
        "input": 1,
        "output": 1,
    }

    # Verilog
    module name(input i0, output i1);
    """
    _input = json_module['input']
    _output = json_module['output']

    code = '\nmodule ' + name
    code += '('
    if _input:
        ilist = []
        for i in xrange(_input):
            ilist += ['i' + str(i)]
        code += 'input ' + ', '.join(ilist)
        if _output:
            code += ', '
    if _output:
        olist = []
        for o in xrange(_output):
            olist += ['o' + str(o)]
        code += 'output ' + ', '.join(olist)
    code += ');'
    return code


def generate_module(name, json_module):
    """
    # JSON + name: not
    {
        "input": ["a"],
        "output": ["b"],
        "inline": "assign b = ! a;"
    }

    # Verilog
    module notx(input a, output b);
    assign b = ! a;
    endmodule
    """
    code = generate_head(name + 'x', json_module) + '\n'
    code += json_module['inline'] + '\n'
    code += 'endmodule\n'
    return code


def generate_netlist(json_netlist):
    """
    # JSON
    {
        "name": "main",
        "input": 1,
        "output": 1,
        "pcf": {
            "i0": 99,
            "o0": 98
        },
        "wires": [
            "w0"
        ],
        "modules": [
            {
                "name": "not0",
                "type": "not",
                "input": {
                    "i0": "i0"
                },
                "output": {
                    "o0": "o0"
                }
            }
        ],
        "inline": ""
    }

    # Verilog
    module main(input i0, output i0);
    wire w0;
    notx not0 (
        .i0(i0),
        .b(o0)
    );
    endmodule
    """
    _wires = json_netlist['wires']
    _modules = json_netlist['modules']
    _inline = json_netlist['inline']
    code = generate_head(json_netlist['name'], json_netlist) + '\n'
    # Wires
    if _wires:
        for wire in _wires:
            code += 'wire ' + wire + ';\n'
    # Modules
    if _modules:
        for module in _modules:
            code += module['type'] + 'x ' + module['name'] + ' (\n'
            input_list = []
            output_list = []
            for _input in module['input']:
                input_list += ['    .' + _input + '(' + module['input'][_input] + ')']
            for _output in module['output']:
                output_list += ['    .' + _output + '(' + module['output'][_output] + ')']
            code += ',\n'.join(input_list + output_list) + '\n'
            code += ');\n'
    # Inline
    if _inline:
        code += _inline + '\n'
    code += 'endmodule\n'
    return code


def generate_pcf(json_netlist):
    """
    # JSON
    {
        "name": "main",
        "input": 1,
        "output": 1,
        "pcf": {
            "i0": 99,
            "o0": 98
        },
        ...
    }

    # PCF
    set_io i0 99
    set_io o0 98
    """
    code = ''
    for key, value in json_netlist['pcf'].iteritems():
        code += 'set_io ' + key + ' ' + str(value) + '\n'
    return code


def get_json_module(_type, json_netlist):
    module = None
    with open(_type + '.json') as data_json:
        module = json.load(data_json)
        data_json.close()
    return module


def load_verilog_modules(json_netlist):
    code = ''
    for module in json_netlist['modules']:
        _type = module['type']
        json_module = get_json_module(_type, json_netlist)
        code += generate_module(_type, json_module)
    return code


def load_verilog_netlist(json_netlist):
    code = ''
    code += generate_netlist(json_netlist)
    return code


def load_pcf(json_netlist):
    code = ''
    code += generate_pcf(json_netlist)
    return code


def main():
    filename = 'main'

    with open(filename + '.json') as data_json:

        # Read JSON
        json_netlist = json.load(data_json)

        with open('../' + filename + '.v', 'w') as data_verilog:

            # Generate Verilog
            code = '// Generated verilog\n'
            code += load_verilog_modules(json_netlist)
            code += load_verilog_netlist(json_netlist)

            # Write Verilog
            data_verilog.write(code)
            data_verilog.close()

        with open('../' + filename + '.pcf', 'w') as data_verilog:

            # Generate PCF
            code = load_pcf(json_netlist)

            # Write PCF
            data_verilog.write(code)
            data_verilog.close()

        data_json.close()


if __name__ == '__main__':
    main()
